async def save_resource(self, url, content, content_type):
    file_path = self.get_file_path(url)
    
    # Try to create directory, handle NotADirectoryError by adding hash suffix
    try:
        os.makedirs(os.path.dirname(file_path), exist_ok=True)
    except NotADirectoryError:
        # A file exists where we need a directory, so modify the path with a hash
        conflicting_path = os.path.dirname(file_path)
        # Get the problematic component
        parent_dir = os.path.dirname(conflicting_path)
        problem_component = os.path.basename(conflicting_path)
        
        # Generate a unique hash suffix
        hash_suffix = xxhash.xxh32(problem_component.encode()).hexdigest()[:8]
        new_component = f"{problem_component}_{hash_suffix}"
        
        # Create new path with hashed component
        new_dir_path = os.path.join(parent_dir, new_component)
        file_path = os.path.join(new_dir_path, os.path.basename(file_path))
        
        print(f"Path conflict detected: {conflicting_path}")
        print(f"Using alternative path: {new_dir_path}")
        
        # Now try to create the directory with the new path
        os.makedirs(os.path.dirname(file_path), exist_ok=True)

    mode = 'w' if content_type.startswith('text') else 'wb'
    encoding = 'utf-8' if content_type.startswith('text') else None

    # 既にファイルが存在する場合でも、visitedとpath_mapを更新
    if os.path.exists(file_path):
        print(f"File already exists: {file_path}")
        relative_path = os.path.relpath(file_path, self.output_dir)
        self.visited.insert(url, "True")
        self.path_map.insert(url, relative_path)
        # 新しいデータ構造も更新
        self.visited_urls.add(url)
        self.url_to_path[url] = relative_path

        # ダウンロード処理回数をカウントし、10回ごとに状態を保存
        self.processed_count += 1
        if self.processed_count % 10 == 0:
            self.save_state()

        return relative_path

    try:
        async with aiofiles.open(file_path, mode=mode, encoding=encoding) as f:
            await f.write(content)
    except Exception as e:
        print(f"Error saving {url}: {e}")
        return None

    relative_path = os.path.relpath(file_path, self.output_dir)
    self.visited.insert(url, "True")
    self.path_map.insert(url, relative_path)
    # 新しいデータ構造も更新
    self.visited_urls.add(url)
    self.url_to_path[url] = relative_path

    # ダウンロード処理回数をカウントし、10回ごとに状態を保存
    self.processed_count += 1
    if self.processed_count % 10 == 0:
        self.save_state()

    return relative_path

